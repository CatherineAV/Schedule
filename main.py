import flet as ft
import threading
import create_db as db
from db_operations import get_table_data, get_groups_with_subgroups, get_table_columns, insert_data, insert_group_with_subgroups

# –¶–≤–µ—Ç–æ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
PALETTE = ["#18363E", "#5F97AA", "#2D5F6E", "#3E88A5", "#93C4D1"]

db.init_db()


def main(page: ft.Page):
    page.title = "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    page.bgcolor = PALETTE[4]
    page.horizontal_alignment = "stretch"
    page.vertical_alignment = "start"
    page.window.min_width = 1000
    page.window.min_height = 600
    page.window.center()
    page.padding = 0
    page.spacing = 0

    menu_column = ft.Column(spacing=10, expand=True)

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    content = ft.Container(
        content=ft.Text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", size=16),
        expand=True,
        bgcolor=ft.Colors.WHITE,
        padding=20,
        margin=ft.margin.only(left=20),
        border_radius=15,
    )

    def show_toast(message: str, success: bool = True):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        toast = ft.Container(
            content=ft.Text(message, color=ft.Colors.WHITE, size=14, weight="bold"),
            bgcolor=ft.Colors.GREEN_400 if success else ft.Colors.RED_400,
            padding=15,
            border_radius=10,
            width=400,
            alignment=ft.alignment.center,
            top=page.height / 2 - 25,  # –¶–µ–Ω—Ç—Ä –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            left=page.width / 2 - 100,  # –¶–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            animate_position=ft.Animation(300, ft.AnimationCurve.EASE_OUT),
            shadow=ft.BoxShadow(blur_radius=10, color=ft.Colors.BLACK54)
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ overlay
        page.overlay.append(toast)
        page.update()

        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        def remove_toast():
            import time
            time.sleep(2)
            if toast in page.overlay:
                page.overlay.remove(toast)
                page.update()

        threading.Thread(target=remove_toast, daemon=True).start()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
    def create_data_table(data, columns):
        if not data:
            return ft.Container(
                content=ft.Text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", size=16),
                alignment=ft.alignment.center,
                padding=20
            )

        # –î–ª—è —Ç–∞–±–ª–∏—Ü—ã –ì—Ä—É–ø–ø—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if "–ì—Ä—É–ø–ø—ã" in str(data[0].get('table_name', '')) or any('–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' in col for col in columns):
            display_columns = [col for col in columns if col != 'ID']
        else:
            display_columns = columns

        data_rows = []
        for row in data:
            cells = []
            for col in display_columns:
                value = row.get(col, "")
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                if col == "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º":
                    value = "–î–∞" if value == 1 or value == "–î–∞" else "–ù–µ—Ç"
                elif col == "–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" and not value:
                    value = "–ù–µ—Ç"
                elif col == "–ü–æ–¥–≥—Ä—É–ø–ø–∞" and not value:
                    value = "–ù–µ—Ç"

                txt = ft.Text(str(value), color=PALETTE[2], no_wrap=False)
                cell = ft.DataCell(ft.Container(txt, expand=True, alignment=ft.alignment.center_left))
                cells.append(cell)
            data_rows.append(ft.DataRow(cells=cells))

        return ft.DataTable(
            columns=[ft.DataColumn(ft.Text(c, weight="bold", color=PALETTE[2])) for c in display_columns],
            rows=data_rows,
            expand=True,
            divider_thickness=0
        )

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –º–µ–Ω—é
    def render_main_menu(e=None):
        menu_column.controls.clear()
        menu_column.controls.extend([
            ft.ElevatedButton(
                "–î–∞–Ω–Ω—ã–µ",
                icon=ft.Icons.FOLDER,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=render_data_menu),
            ft.ElevatedButton(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                icon=ft.Icons.SETTINGS,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=render_settings),
            ft.ElevatedButton(
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
                icon=ft.Icons.PLAY_ARROW,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=render_generate),
        ])
        content.content = ft.Column([
            ft.Text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", size=16)
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        page.update()

    def render_data_menu(e=None):
        menu_column.controls.clear()
        menu_column.controls.extend([
            ft.ElevatedButton(
                "–ù–∞–∑–∞–¥",
                icon=ft.Icons.ARROW_BACK,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=render_main_menu),
            ft.Divider(height=20, color=ft.Colors.WHITE),
            ft.ElevatedButton(
                "–ì—Ä—É–ø–ø—ã",
                icon=ft.Icons.GROUPS,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: render_data_pane("–ì—Ä—É–ø–ø—ã")),
            ft.ElevatedButton(
                "–ü—Ä–µ–¥–º–µ—Ç—ã",
                icon=ft.Icons.CLASS_,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: render_data_pane("–ü—Ä–µ–¥–º–µ—Ç—ã")),
            ft.ElevatedButton(
                "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏",
                icon=ft.Icons.MAN,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: render_data_pane("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")),
            ft.ElevatedButton(
                "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
                icon=ft.Icons.MAP,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: render_data_pane("–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏")),
            ft.ElevatedButton(
                "–ö–∞–±–∏–Ω–µ—Ç—ã",
                icon=ft.Icons.PLACE,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: render_data_pane("–ö–∞–±–∏–Ω–µ—Ç—ã")),
        ])
        content.content = ft.Column([
            ft.Text("–†–∞–∑–¥–µ–ª –î–∞–Ω–Ω—ã–µ. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å.", size=16)
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        page.update()

    def render_data_pane(section_name):
        if section_name == "–ì—Ä—É–ø–ø—ã":
            data = get_groups_with_subgroups()
            columns = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ü–æ–¥–≥—Ä—É–ø–ø–∞", "–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º"]
        else:
            data = get_table_data(section_name)
            columns = get_table_columns(section_name)

        data_table = create_data_table(data, columns)

        # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        table_scroll = ft.ListView(
            [data_table],
            expand=True,
            spacing=0,
            padding=0,
            auto_scroll=False
        )

        # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content.content = ft.Column([
            ft.Row([
                ft.Text(section_name, size=20, weight="bold", color=PALETTE[2]),
                ft.ElevatedButton(
                    text="üû¢",
                    style=ft.ButtonStyle(
                        bgcolor=PALETTE[3], color="white", padding=16, shape=ft.CircleBorder()
                    ),
                    on_click=lambda e: render_add_form(section_name, columns)
                )
            ]),
            ft.Divider(height=20, color=PALETTE[1]),
            ft.Container(
                content=table_scroll,
                expand=True,
                padding=10,
                border=ft.border.all(1, color=PALETTE[1]),
                border_radius=5,
            )
        ], expand=True)

        page.update()

    def render_add_form(table_name, columns):
        if table_name == "–ì—Ä—É–ø–ø—ã":
            render_group_add_form()
        else:
            # –û–±—ã—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
            render_standard_add_form(table_name, columns)

    def render_group_add_form():
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø"""
        group_name_field = ft.TextField(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
            border_color=PALETTE[3],
            color=PALETTE[2],
            on_change=lambda e: update_subgroup_options(e.control.value)
        )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
        subgroup_label = ft.Text("–ü–æ–¥–≥—Ä—É–ø–ø—ã", size=16, weight="bold", color=PALETTE[2], visible=False)

        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø
        subgroup_checkboxes = ft.Column(visible=False)

        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è ...
        self_education_dropdown = ft.Dropdown(
            label="–î–µ–Ω—å —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            width=210,
            border_color=PALETTE[3],
            bgcolor=ft.Colors.BLUE_GREY,
            color=PALETTE[2],
            options=[
                ft.dropdown.Option("–Ω–µ—Ç"),
                ft.dropdown.Option("–ø–Ω"),
                ft.dropdown.Option("–≤—Ç"),
                ft.dropdown.Option("—Å—Ä"),
                ft.dropdown.Option("—á—Ç"),
                ft.dropdown.Option("–ø—Ç"),
                ft.dropdown.Option("—Å–±")
            ],
            value="–Ω–µ—Ç"
        )

        important_talks_switch = ft.Switch(
            label=" –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º",
            value=False,
            label_style=ft.TextStyle(color=PALETTE[2])
        )

        selected_subgroups = []
        subgroup_checkbox_refs = {}

        def update_subgroup_options(group_name):
            if not group_name:
                subgroup_label.visible = False
                subgroup_checkboxes.visible = False
                subgroup_checkboxes.controls = []
                subgroup_checkbox_refs.clear()
                selected_subgroups.clear()
            else:
                subgroup_label.visible = True
                subgroup_checkboxes.visible = True

                if "–•–ë–û" in group_name.upper():
                    options = ["–ö—É–∫–æ–ª—å–Ω–∏–∫–∏", "–ë—É—Ç–∞—Ñ–æ—Ä—ã"]
                elif "–•–ö–û" in group_name.upper():
                    options = ["–ñ–µ–Ω—Å–∫–∞—è", "–ú—É–∂—Å–∫–∞—è"]
                else:
                    options = ["–ù–µ—Ç", "1", "2", "3"]

                checkbox_controls = []
                subgroup_checkbox_refs.clear()
                selected_subgroups.clear()

                for option in options:
                    checkbox = ft.Checkbox(
                        label=option,
                        value=False,
                        label_style=ft.TextStyle(color=PALETTE[2]),
                        on_change=lambda e, opt=option: on_subgroup_change(opt, e.control.value)
                    )
                    subgroup_checkbox_refs[option] = checkbox
                    checkbox_controls.append(checkbox)

                subgroup_checkboxes.controls = checkbox_controls

            page.update()

        def on_subgroup_change(option, is_checked):
            if option == "–ù–µ—Ç":
                if is_checked:
                    for opt, checkbox in subgroup_checkbox_refs.items():
                        if opt != "–ù–µ—Ç":
                            checkbox.value = False
                            if opt in selected_subgroups:
                                selected_subgroups.remove(opt)
                    if "–ù–µ—Ç" not in selected_subgroups:
                        selected_subgroups.append("–ù–µ—Ç")  # <-- –≤–æ—Ç —ç—Ç–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ
                else:
                    if "–ù–µ—Ç" in selected_subgroups:
                        selected_subgroups.remove("–ù–µ—Ç")
            else:
                if is_checked:
                    if "–ù–µ—Ç" in subgroup_checkbox_refs:
                        subgroup_checkbox_refs["–ù–µ—Ç"].value = False
                        if "–ù–µ—Ç" in selected_subgroups:
                            selected_subgroups.remove("–ù–µ—Ç")
                    if option not in selected_subgroups:
                        selected_subgroups.append(option)
                else:
                    if option in selected_subgroups:
                        selected_subgroups.remove(option)
            page.update()

        def on_form_submit(e):
            group_name = group_name_field.value.strip()

            if not group_name:
                show_toast("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!", success=False)
                return

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            if not selected_subgroups:
                show_toast("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–¥–≥—Ä—É–ø–ø—É (–∏–ª–∏ '–ù–µ—Ç')!", success=False)
                return

            # 3. –í—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            group_data = {
                '–ù–∞–∑–≤–∞–Ω–∏–µ': group_name,
                '–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': self_education_dropdown.value if self_education_dropdown.value != "–Ω–µ—Ç" else None,
                '–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º': 1 if important_talks_switch.value else 0
            }

            if insert_group_with_subgroups(group_data, selected_subgroups):
                show_toast("–ì—Ä—É–ø–ø–∞ –∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", success=True)
                render_data_pane("–ì—Ä—É–ø–ø—ã")
            else:
                show_toast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã!", success=False)

        form_content = ft.Column([
            ft.Text("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", size=18, weight="bold", color=PALETTE[2]),
            group_name_field,
            subgroup_label,
            subgroup_checkboxes,
            self_education_dropdown,
            important_talks_switch,
            ft.Row([
                ft.ElevatedButton(
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    style=ft.ButtonStyle(bgcolor=PALETTE[3], color="white", padding=20),
                    on_click=on_form_submit
                ),
                ft.ElevatedButton(
                    "–û—Ç–º–µ–Ω–∞",
                    style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                    on_click=lambda e: render_data_pane("–ì—Ä—É–ø–ø—ã")
                )
            ])
        ], spacing=15)

        content.content = ft.Container(
            content=form_content,
            padding=20
        )
        page.update()

    def render_standard_add_form(table_name, columns):
        """–û–±—ã—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü"""
        form_fields_ref = {}

        def on_form_submit(e):
            data = {}
            for column in columns:
                if column.lower() != 'id' and column in form_fields_ref:
                    data[column] = form_fields_ref[column].value

            if insert_data(table_name, data):
                show_toast(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {table_name}!", success=True)
                render_data_pane(table_name)
            else:
                show_toast(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {table_name}", success=False)

        form_content = ft.Column([
            ft.Text(f"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {table_name}", size=18, weight="bold", color=PALETTE[2])
        ])

        for column in columns:
            if column.lower() != 'id':
                field = ft.TextField(
                    label=column,
                    border_color=PALETTE[3],
                    color=PALETTE[2]
                )
                form_fields_ref[column] = field
                form_content.controls.append(field)

        form_content.controls.extend([
            ft.Row([
                ft.ElevatedButton(
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    style=ft.ButtonStyle(bgcolor=PALETTE[3], color="white", padding=20),
                    on_click=on_form_submit
                ),
                ft.ElevatedButton(
                    "–û—Ç–º–µ–Ω–∞",
                    style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                    on_click=lambda e: render_data_pane(table_name)
                )
            ])
        ])

        content.content = ft.Container(
            content=form_content,
            padding=20
        )
        page.update()

    def render_settings(e=None):
        content.content = ft.Column([
            ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", size=16, color=PALETTE[0])
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        page.update()

    def render_generate(e=None):
        content.content = ft.Column([
            ft.Text("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", size=16, color=PALETTE[0])
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        page.update()

    # –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    render_main_menu()

    # –ú–∞–∫–µ—Ç: –º–µ–Ω—é —Å–ª–µ–≤–∞, –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞ - –æ–±–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ
    page.add(
        ft.Row(
            [
                # –ú–µ–Ω—é - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
                ft.Container(
                    content=menu_column,
                    width=260,
                    bgcolor=PALETTE[1],
                    padding=20,
                    margin=ft.margin.only(top=20, bottom=20, left=20),
                    border_radius=15,
                ),
                # –ö–æ–Ω—Ç–µ–Ω—Ç - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π
                ft.Container(
                    content=content,
                    expand=True,
                    margin=ft.margin.only(top=20, bottom=20, right=20, left=0),
                ),
            ],
            expand=True,
            spacing=0,
        )
    )


ft.app(target=main)
