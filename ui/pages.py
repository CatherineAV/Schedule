import flet as ft
from typing import Callable, List, Dict, Any, Optional
from database.operations import DBOperations
from ui.components import Toast, DataTableManager, PALETTE
from ui.forms import GroupForm


class BasePage:
    def __init__(self, menu_column: ft.Column, content: ft.Container,
                 page: ft.Page, db_ops: DBOperations, toast: Toast):
        self.menu_column = menu_column
        self.content = content
        self.page = page
        self.db_ops = db_ops
        self.toast = toast
        self.table_manager = DataTableManager()


class MainMenu(BasePage):
    def render(self):
        self.menu_column.controls.clear()
        self.menu_column.controls.extend([
            ft.ElevatedButton(
                "–î–∞–Ω–Ω—ã–µ",
                icon=ft.Icons.FOLDER,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=self._on_data_click
            ),
            ft.ElevatedButton(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                icon=ft.Icons.SETTINGS,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=self._on_settings_click
            ),
            ft.ElevatedButton(
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
                icon=ft.Icons.PLAY_ARROW,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=self._on_generate_click
            ),
        ])

        self.content.content = ft.Column([
            ft.Text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", size=16, color=PALETTE[0])
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)

        self.page.update()

    def _on_data_click(self, e):
        data_menu = DataMenu(self.menu_column, self.content, self.page, self.db_ops, self.toast)
        data_menu.render()

    def _on_settings_click(self, e):
        self.content.content = ft.Column([
            ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", size=16, color=PALETTE[0])
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        self.page.update()

    def _on_generate_click(self, e):
        self.content.content = ft.Column([
            ft.Text("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", size=16, color=PALETTE[0])
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        self.page.update()


class DataMenu(BasePage):
    def render(self):
        self.menu_column.controls.clear()
        self.menu_column.controls.extend([
            ft.ElevatedButton(
                "–ù–∞–∑–∞–¥",
                icon=ft.Icons.ARROW_BACK,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=self._on_back_click
            ),
            ft.Divider(height=20, color=ft.Colors.WHITE),
            ft.ElevatedButton(
                "–ì—Ä—É–ø–ø—ã",
                icon=ft.Icons.GROUPS,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: self._on_section_click("–ì—Ä—É–ø–ø—ã")
            ),
            ft.ElevatedButton(
                "–ü—Ä–µ–¥–º–µ—Ç—ã",
                icon=ft.Icons.CLASS_,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: self._on_section_click("–ü—Ä–µ–¥–º–µ—Ç—ã")
            ),
            ft.ElevatedButton(
                "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏",
                icon=ft.Icons.MAN,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: self._on_section_click("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
            ),
            ft.ElevatedButton(
                "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
                icon=ft.Icons.MAP,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: self._on_section_click("–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏")
            ),
            ft.ElevatedButton(
                "–ö–∞–±–∏–Ω–µ—Ç—ã",
                icon=ft.Icons.PLACE,
                style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                on_click=lambda e: self._on_section_click("–ö–∞–±–∏–Ω–µ—Ç—ã")
            ),
        ])

        self.content.content = ft.Column([
            ft.Text("–†–∞–∑–¥–µ–ª –î–∞–Ω–Ω—ã–µ. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å.", size=16, color=PALETTE[0])
        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)

        self.page.update()

    def _on_back_click(self, e):
        main_menu = MainMenu(self.menu_column, self.content, self.page, self.db_ops, self.toast)
        main_menu.render()

    def _on_section_click(self, section_name: str):
        data_pane = DataPane(self.menu_column, self.content, self.page, self.db_ops, self.toast)
        data_pane.render(section_name)


class DataPane(BasePage):
    def render(self, section_name: str):
        if section_name == "–ì—Ä—É–ø–ø—ã":
            data = self.db_ops.get_groups_with_subgroups()
            columns = ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ü–æ–¥–≥—Ä—É–ø–ø–∞", "–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º"]
        else:
            data = self.db_ops.get_table_data(section_name)
            columns = self.db_ops.get_table_columns(section_name)

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        selected_row = self.table_manager.get_selected_row(section_name)

        delete_button_style = ft.ButtonStyle(
            bgcolor=ft.Colors.RED_400 if selected_row is not None else ft.Colors.GREY_400,
            color="white",
            padding=16,
            shape=ft.CircleBorder()
        )

        edit_button_style = ft.ButtonStyle(
            bgcolor=PALETTE[3] if selected_row is not None else ft.Colors.GREY_400,
            color="white",
            padding=16,
            shape=ft.CircleBorder()
        )

        def on_row_select(index):
            # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É, —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–∏–º —á–µ—Ä–µ–∑ refresh_table
            refresh_table()

        def refresh_table():
            selected_row = self.table_manager.get_selected_row(section_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
            delete_button_style.bgcolor = ft.Colors.RED_400 if selected_row is not None else ft.Colors.GREY_400
            edit_button_style.bgcolor = PALETTE[3] if selected_row is not None else ft.Colors.GREY_400

            data_table = self.table_manager.create_data_table(data, columns, section_name, on_row_select)
            table_scroll.controls = [data_table]
            self.page.update()

        def delete_selected_record(e):
            selected_row = self.table_manager.get_selected_row(section_name)

            if selected_row is None:
                self.toast.show("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", success=False)
                return

            dialog = ft.AlertDialog(
                modal=True,
                title=ft.Text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"),
                content=ft.Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?"),
                actions=[]
            )

            def on_confirm_delete(evt):
                record = data[selected_row]

                if section_name == "–ì—Ä—É–ø–ø—ã":
                    success = self.db_ops.delete_group_with_subgroups(record['–ù–∞–∑–≤–∞–Ω–∏–µ'], record['–ü–æ–¥–≥—Ä—É–ø–ø–∞'])
                else:
                    success = self.db_ops.delete_record(section_name, record['ID'])

                if success:
                    self.toast.show("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", success=True)
                    self.table_manager.clear_selection(section_name)
                    self.render(section_name)
                else:
                    self.toast.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏!", success=False)

                dialog.open = False
                self.page.update()

            def on_cancel_delete(evt):
                dialog.open = False
                self.page.update()

            dialog.actions = [
                ft.TextButton("–î–∞", on_click=on_confirm_delete),
                ft.TextButton("–ù–µ—Ç", on_click=on_cancel_delete)
            ]

            self.page.overlay.append(dialog)
            dialog.open = True
            self.page.update()

        def edit_selected_record(e):
            selected_row = self.table_manager.get_selected_row(section_name)

            if selected_row is None:
                self.toast.show("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", success=False)
                return

            record = data[selected_row]

            if section_name == "–ì—Ä—É–ø–ø—ã":
                self._render_edit_group_form(record)
            else:
                self._render_edit_standard_form(section_name, record, columns)

        data_table = self.table_manager.create_data_table(data, columns, section_name, on_row_select)

        table_scroll = ft.ListView(
            [data_table],
            expand=True,
            spacing=0,
            padding=0,
            auto_scroll=False
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
        edit_button = ft.ElevatedButton(
            text="‚úèÔ∏è",
            style=edit_button_style,
            on_click=edit_selected_record,
            tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"
        )

        delete_button = ft.ElevatedButton(
            text="üóëÔ∏è",
            style=delete_button_style,
            on_click=delete_selected_record,
            tooltip="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"
        )

        add_button = ft.ElevatedButton(
            text="üû¢",
            style=ft.ButtonStyle(
                bgcolor=PALETTE[3],
                color="white",
                padding=16,
                shape=ft.CircleBorder()
            ),
            on_click=lambda e: self._render_add_form(section_name, columns),
            tooltip="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
        )

        self.content.content = ft.Column([
            ft.Row([
                ft.Text(section_name, size=20, weight="bold", color=PALETTE[2]),
                ft.Row([add_button, edit_button, delete_button], spacing=10)
            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            ft.Divider(height=20, color=PALETTE[1]),
            ft.Container(
                content=table_scroll,
                expand=True,
                padding=10,
                border=ft.border.all(1, color=PALETTE[1]),
                border_radius=5,
            )
        ], expand=True)

        self.page.update()

    # –í–´–ù–û–°–ò–ú –ú–ï–¢–û–î–´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ó RENDER –ù–ê –£–†–û–í–ï–ù–¨ –ö–õ–ê–°–°–ê:

    def _render_edit_group_form(self, record):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        group_name = record['–ù–∞–∑–≤–∞–Ω–∏–µ']
        subgroups = [record['–ü–æ–¥–≥—Ä—É–ø–ø–∞']] if record['–ü–æ–¥–≥—Ä—É–ø–ø–∞'] != "–ù–µ—Ç" else []

        def on_form_submit(group_data, subgroups):
            # –ù–∞—Ö–æ–¥–∏–º ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            all_groups = self.db_ops.get_groups_with_subgroups()
            group_id = None
            for group in all_groups:
                if group['–ù–∞–∑–≤–∞–Ω–∏–µ'] == group_name and group['–ü–æ–¥–≥—Ä—É–ø–ø–∞'] == record['–ü–æ–¥–≥—Ä—É–ø–ø–∞']:
                    group_id = group['ID']
                    break

            if group_id and self.db_ops.update_group_with_subgroups(group_id, group_data, subgroups):
                self.toast.show("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", success=True)
                self.render("–ì—Ä—É–ø–ø—ã")
            else:
                self.toast.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã!", success=False)

        def on_form_cancel(e):
            self.render("–ì—Ä—É–ø–ø—ã")

        group_data = {
            '–ù–∞–∑–≤–∞–Ω–∏–µ': record['–ù–∞–∑–≤–∞–Ω–∏–µ'],
            '–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': record['–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'] if record['–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'] != "–ù–µ—Ç" else None,
            '–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º': 1 if record['–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º'] == "–î–∞" else 0
        }

        group_form = GroupForm(
            on_form_submit, on_form_cancel, self.db_ops, self.toast,
            edit_mode=True, group_data=group_data, subgroups=subgroups
        )
        group_form.set_page(self.page)

        self.content.content = ft.Container(
            content=group_form.build(),
            padding=20,
            expand=True
        )

        self.page.update()

    def _render_edit_standard_form(self, table_name: str, record: Dict, columns: List[str]):
        form_fields_ref = {}

        def on_form_submit(e):
            data = {}
            for column in columns:
                if column.lower() != 'id' and column in form_fields_ref:
                    data[column] = form_fields_ref[column].value

            if self.db_ops.update_record(table_name, record['ID'], data):
                self.toast.show(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {table_name}!", success=True)
                self.render(table_name)
            else:
                self.toast.show(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {table_name}", success=False)

        form_content = ft.Column([
            ft.Text(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ {table_name}", size=18, weight="bold", color=PALETTE[2])
        ])

        for column in columns:
            if column.lower() != 'id':
                field = ft.TextField(
                    label=column,
                    border_color=PALETTE[3],
                    color=PALETTE[2],
                    value=str(record.get(column, ""))
                )
                form_fields_ref[column] = field
                form_content.controls.append(field)

        form_content.controls.extend([
            ft.Row([
                ft.ElevatedButton(
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    style=ft.ButtonStyle(bgcolor=PALETTE[3], color="white", padding=20),
                    on_click=on_form_submit
                ),
                ft.ElevatedButton(
                    "–û—Ç–º–µ–Ω–∞",
                    style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                    on_click=lambda e: self.render(table_name)
                )
            ])
        ])

        self.content.content = ft.Container(
            content=form_content,
            padding=20
        )

        self.page.update()

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
    def _render_add_form(self, table_name: str, columns: List[str]):
        if table_name == "–ì—Ä—É–ø–ø—ã":
            self._render_group_add_form()
        else:
            self._render_standard_add_form(table_name, columns)

    def _render_group_add_form(self):
        def on_form_submit(group_data, subgroups):  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            success = self.db_ops.insert_group_with_subgroups(group_data, subgroups)
            if success:
                self.toast.show("–ì—Ä—É–ø–ø–∞ –∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", success=True)
                self.render("–ì—Ä—É–ø–ø—ã")
            else:
                self.toast.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã! –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø–∞ "
                                "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", success=False)

        def on_form_cancel(e):
            self.render("–ì—Ä—É–ø–ø—ã")

        group_form = GroupForm(on_form_submit, on_form_cancel, self.db_ops, self.toast)
        group_form.set_page(self.page)

        self.content.content = ft.Container(
            content=group_form.build(),
            padding=20,
            expand=True
        )

        self.page.update()

    def _render_standard_add_form(self, table_name: str, columns: List[str]):
        form_fields_ref = {}

        def on_form_submit(e):
            data = {}
            for column in columns:
                if column.lower() != 'id' and column in form_fields_ref:
                    data[column] = form_fields_ref[column].value

            if self.db_ops.insert_data(table_name, data):
                self.toast.show(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {table_name}!", success=True)
                self.render(table_name)
            else:
                self.toast.show(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {table_name}", success=False)

        form_content = ft.Column([
            ft.Text(f"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {table_name}", size=18, weight="bold", color=PALETTE[2])
        ])

        for column in columns:
            if column.lower() != 'id':
                field = ft.TextField(
                    label=column,
                    border_color=PALETTE[3],
                    color=PALETTE[2]
                )
                form_fields_ref[column] = field
                form_content.controls.append(field)

        form_content.controls.extend([
            ft.Row([
                ft.ElevatedButton(
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    style=ft.ButtonStyle(bgcolor=PALETTE[3], color="white", padding=20),
                    on_click=on_form_submit
                ),
                ft.ElevatedButton(
                    "–û—Ç–º–µ–Ω–∞",
                    style=ft.ButtonStyle(bgcolor=PALETTE[2], color="white", padding=20),
                    on_click=lambda e: self.render(table_name)
                )
            ])
        ])

        self.content.content = ft.Container(
            content=form_content,
            padding=20
        )

        self.page.update()
